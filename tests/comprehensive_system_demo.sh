#!/bin/bash

echo "=============================================================="
echo "üöÄ FINAL TCS RAG AGENT - REPORT GENERATION SCRIPT"
echo "=============================================================="
echo ""

# --- Configuration ---
API_URL="http://localhost:8000/api/v1"
FILENAME="TCS_Annual_report.pdf"
OUTPUT_FILE="extraction_results.md"
REPO_URL="https://github.com/MohitBhimrajka/tcs-rag-agent"

# --- Step 0: Initialize Report File ---
echo "Initializing report file: $OUTPUT_FILE"
cat > "$OUTPUT_FILE" << EOL
# üìÑ AI Agent Financial Extraction Report

**GitHub Repository:** [${REPO_URL}](${REPO_URL})

This report was automatically generated by the comprehensive system demo script. It details the end-to-end execution of the RAG agent against the document \`$FILENAME\`.

---

## 1. System Validation & Job Execution

\`\`\`sh
EOL
echo "‚úÖ Report initialization complete."
echo "" | tee -a "$OUTPUT_FILE"

# --- Step 1: Document Management ---
echo "1Ô∏è‚É£  Verifying Document Management API" | tee -a "$OUTPUT_FILE"
echo "---------------------------------------------" | tee -a "$OUTPUT_FILE"
echo "GET $API_URL/documents" | tee -a "$OUTPUT_FILE"
curl -s "$API_URL/documents" | jq . | tee -a "$OUTPUT_FILE"
echo "" | tee -a "$OUTPUT_FILE"

# --- Step 2: Start Extraction Job ---
echo "2Ô∏è‚É£  Starting Asynchronous Extraction Job" | tee -a "$OUTPUT_FILE"
echo "---------------------------------------------" | tee -a "$OUTPUT_FILE"
echo "POST $API_URL/extract with filename: $FILENAME" | tee -a "$OUTPUT_FILE"
EXTRACTION_RESPONSE=$(curl -s -X POST "$API_URL/extract" \
  -H "Content-Type: application/json" \
  -d "{\"filename\": \"$FILENAME\"}")

echo "Initial Response:" | tee -a "$OUTPUT_FILE"
echo "$EXTRACTION_RESPONSE" | jq . | tee -a "$OUTPUT_FILE"
RUN_ID=$(echo "$EXTRACTION_RESPONSE" | jq -r .run_id)

if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
    echo "‚ùå CRITICAL ERROR: Failed to start extraction job. Aborting." | tee -a "$OUTPUT_FILE"
    exit 1
fi
echo "‚úÖ Job started successfully with Run ID: $RUN_ID" | tee -a "$OUTPUT_FILE"
echo "" | tee -a "$OUTPUT_FILE"

# --- Step 3: Poll for Completion ---
echo "3Ô∏è‚É£  Polling for Job Completion (Max wait: 3 minutes)" | tee -a "$OUTPUT_FILE"
echo "---------------------------------------------" | tee -a "$OUTPUT_FILE"
for i in {1..18}; do
  STATUS_RESPONSE=$(curl -s "$API_URL/extractions/$RUN_ID/status")
  STATUS=$(echo "$STATUS_RESPONSE" | jq -r .status)
  CURRENT_TASK=$(echo "$STATUS_RESPONSE" | jq -r .current_task)
  
  echo "Polling check #$i: Status is '$STATUS', Current Task: '$CURRENT_TASK'" | tee -a "$OUTPUT_FILE"
  
  if [ "$STATUS" = "completed" ] || [ "$STATUS" = "failed" ]; then
    echo "‚úÖ Job finished with status: $STATUS" | tee -a "$OUTPUT_FILE"
    break
  fi
  sleep 10
done
echo "" | tee -a "$OUTPUT_FILE"

if [ "$STATUS" != "completed" ]; then
    echo "‚ùå ERROR: Job did not complete successfully. Final status was '$STATUS'." | tee -a "$OUTPUT_FILE"
    exit 1
fi

# --- Step 4: Retrieve and Format Final Results ---
echo "4Ô∏è‚É£  Retrieving and Formatting Final Results"
echo "---------------------------------------------"
RESULTS_JSON=$(curl -s "$API_URL/extractions/$RUN_ID/results")

# Close the initial code block in the Markdown file
echo '```' >> "$OUTPUT_FILE"

# Append formatted results to the Markdown file
echo "## 2. Extracted Financial Data" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Use jq to parse the JSON and format it into a Markdown table
(
    echo "| Metric | Value | Unit | Source Page |"
    echo "|---|---|---|---|"
    echo "$RESULTS_JSON" | jq -r '.results.consolidated_revenue | ["Consolidated Revenue", .value, .unit, .source_page] | @tsv' | awk -F'\t' '{print "| " $1 " | " $2 " | " $3 " | " $4 " |"}'
    echo "$RESULTS_JSON" | jq -r '.results.consolidated_net_income | ["Consolidated Net Income", .value, .unit, .source_page] | @tsv' | awk -F'\t' '{print "| " $1 " | " $2 " | " $3 " | " $4 " |"}'
    echo "$RESULTS_JSON" | jq -r '.results.diluted_eps | ["Diluted EPS", .value, .unit, .source_page] | @tsv' | awk -F'\t' '{print "| " $1 " | " $2 " | " $3 " | " $4 " |"}'
    echo "$RESULTS_JSON" | jq -r '.results.employee_utilization | ["Employee Utilization", .rate_percentage, "%", .source_page] | @tsv' | awk -F'\t' '{print "| " $1 " | " $2 " | " $3 " | " $4 " |"}'
) >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

echo "### Top 3 Segment Contributions" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
(
    echo "| Segment Name | Contribution (%) |"
    echo "|---|---|"
    echo "$RESULTS_JSON" | jq -r '.results.top_3_segment_contributions[] | [.segment_name, .percentage_contribution] | @tsv' | awk -F'\t' '{print "| " $1 " | " $2 " |"}'
) >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

echo "### Key Management Risks" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
RISKS=$(echo "$RESULTS_JSON" | jq -r '.results.key_management_risks[] | .risk_summary')
if [ -z "$RISKS" ]; then
    echo "_No key risks were extracted._" >> "$OUTPUT_FILE"
else
    echo "$RISKS" | while IFS= read -r line; do echo "- $line" >> "$OUTPUT_FILE"; done
fi
echo "" >> "$OUTPUT_FILE"

echo "## 3. Agent Reasoning Trace" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "$RESULTS_JSON" | jq -r '.trace_logs[] | "#### Node: `\(.node_name)`\n**Timestamp:** \(.timestamp)\n```\n\(.log_message)\n```\n"' >> "$OUTPUT_FILE"

# --- ADD THIS NEW SECTION ---
echo ""
echo "5Ô∏è‚É£  Testing Ad-Hoc Query Endpoint"
echo "---------------------------------------------"
echo "POST $API_URL/query"
curl -s -X POST "$API_URL/query" \
  -H "Content-Type: application/json" \
  -d "{\"filename\": \"$FILENAME\", \"question\": \"What was the total number of employees at the end of the fiscal year?\"}" \
  | jq .

echo ""
echo "=============================================================="
echo "üéâ SYSTEM VALIDATION COMPLETE!"
echo "=============================================================="
echo ""
echo "‚úÖ A detailed Markdown report has been saved to: $OUTPUT_FILE"
echo ""
